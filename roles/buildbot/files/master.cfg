# -*- python -*-
# ex: set filetype=python:

#
# Notes:
# * signify key is expected at <masterdir>/packagefeed_master.sec
# * build artifacts are copied to <masterdir>/public_html
# * additional source files are required: {secs,packages,targets,asyncbuild,notify}.py
#

#
# Noteworthy Buildbot features used here:
#
# Dynamic build factories a.k.a. addStepsAfterCurrentStep
# https://docs.buildbot.net/3.6.0/manual/configuration/buildfactories.html
#
# Trigger steps and Triggerable schedulers
# https://docs.buildbot.net/3.6.0/manual/configuration/steps/trigger.html
#
# Parallelized Trigger steps, adapter from @vit9696's code
# https://github.com/buildbot/buildbot/issues/3088
#
# Virtual builders
# https://docs.buildbot.net/3.6.0/manual/configuration/builders.html
#

from datetime import timedelta
from config import config

from buildbot.plugins import *

c = BuildmasterConfig = {}

c['title'] = config['title']
c['titleURL'] = config['titleURL']
c['buildbotURL'] = config['buildbotURL']
c['buildbotNetUsageData'] = None

c['db'] = {'db_url': config['dbURL']}
c['protocols'] = {'pb': {'port': config['pbPort']}}
c['workers'] = [worker.Worker(w[0], w[1]) for w in config['workers']]

c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=6,
    minute=0,
)]

c['www'] = dict(port=config['wwwPort'],
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
                change_hook_dialects={
                    'github': {
                        'secret': config['webhookSecret'],
                        'strict': True}
                    }
                )

c['www']['auth'] = util.GitHubAuth(config['githubClientID'], config['githubClientSecret'])
c['www']['authz'] = util.Authz(
    roleMatchers=[util.RolesFromGroups()],
    allowRules=[util.AnyControlEndpointMatcher(role=config['githubOrg'])])
c['www']['avatar_methods'] = [util.AvatarGitHub()]
c['www']['ui_default_config'] = {
    'Builders.show_old_builders': True,
    'Builders.buildFetchLimit': 1000,
    'Builders.page_size': 500,
    'Build.trigger_step_page_size': 100,
    'BuildRequests.buildrequestFetchLimit': 100,
}

c['change_source'] = []
c['services'] = []
c['schedulers'] = []
c['builders'] = []

# see ./packages.py
from packages import packagesConfig
c = packagesConfig(c, config)

# see ./targets.py
from targets import targetsConfig
c = targetsConfig(c, config)

# see ./notify.py
from notify import MatrixNotifier
c['services'].append(
    MatrixNotifier(
        homeserver=config['matrixHomeserver'],
        accessToken=config['matrixAccessToken'],
        room=config['matrixRoom']))


#########################
#   Define Schedulers   #
#########################
from buildbot.schedulers.basic import SingleBranchScheduler, AnyBranchScheduler
from buildbot.schedulers.timed import Periodic, Nightly
from buildbot.changes import filter


c['change_source'].append(changes.GitPoller(
    workdir='gitpoller-packages',
    pollAtLaunch=True,
    pollInterval=3600*24,
    repourl=config['packages_repo'],
    branches=config['packages_branches'],
))
c['change_source'].append(changes.GitPoller(
    workdir='gitpoller-builter',
    pollAtLaunch=True,
    pollInterval=3600*24,
    repourl=config['builter_repo'],
    branches=config['builter_branches'],
))


c['schedulers'].append(AnyBranchScheduler(
    name="webhook-packages",
    change_filter=filter.ChangeFilter(
        repository=config['packages_repo'].removesuffix('.git'),
        branch=config['packages_branches']),
    treeStableTimer=60,
    builderNames=["builds/packages"]))


# c['schedulers'].append(Nightly(
#     name="nightly-snapshot",
#     dayOfWeek=[0,3],
#     hour=0, # in local timezone of the host running buildbot
#     createAbsoluteSourceStamps=True,
#     onlyIfChanged=False,
#     builderNames=["builds/targets"],
#     codebases={"": {
#         "repository": config['builter_repo'],
#         "branch": config['builter_branches'][0],
#     }},
#     properties={
#         "falterBranch":"snapshot",
#         "falterVersion":"snapshot",
#     }))


# c['schedulers'].append(Nightly(
#     name="nightly-1.4.0-snapshot",
#     dayOfWeek=[2,5],
#     hour=0, # in local timezone of the host running buildbot
#     createAbsoluteSourceStamps=True,
#     onlyIfChanged=False,
#     builderNames=["builds/targets"],
#     codebases={"": {
#         "repository": config['builter_repo'],
#         "branch": config['builter_branches'][0],
#     }},
#     properties={
#         "falterBranch":"1.4.0-snapshot",
#         "falterVersion":"1.4.0-snapshot",
#     }))


# c['schedulers'].append(Nightly(
#     name="nightly-1.3.0-snapshot",
#     dayOfWeek=[1,4],
#     hour=0, # in local timezone of the host running buildbot
#     createAbsoluteSourceStamps=True,
#     onlyIfChanged=False,
#     builderNames=["builds/targets"],
#     codebases={"": {
#         "repository": config['builter_repo'],
#         "branch": config['builter_branches'][0],
#     }},
#     properties={
#         "falterBranch":"1.3.0-snapshot",
#         "falterVersion":"1.3.0-snapshot",
#     }))
